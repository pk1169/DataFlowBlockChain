// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		Version    *big.Int     `json:"version" gencodec:"required"`
		ParentHash common.Hash  `json:"parentHash" gencodec:"required"`
		TxHash     common.Hash  `json:"txHash" gencodec:"required"`
		VotesRoot  common.Hash  `json:"votesRoot" gencodec:"required"`
		Time       *hexutil.Big `json:"time" gencodec:"required"`
		Number     *hexutil.Big `json:"number" gencodec:"required"`
		V          *hexutil.Big `json:"v" 		gencodec:"required"`
		R          *hexutil.Big `json:"r" 		gencodec:"required"`
		S          *hexutil.Big `json:"s" 		gencodec:"required"`
		PubKey     []byte       `json:"pubKey"	gencodec:"required"`
		Hash       common.Hash  `json:"hash"`
	}
	var enc Header
	enc.Version = h.Version
	enc.ParentHash = h.ParentHash
	enc.TxHash = h.TxHash
	enc.VotesRoot = h.VotesRoot
	enc.Time = (*hexutil.Big)(h.Time)
	enc.Number = (*hexutil.Big)(h.Number)
	enc.V = (*hexutil.Big)(h.V)
	enc.R = (*hexutil.Big)(h.R)
	enc.S = (*hexutil.Big)(h.S)
	enc.PubKey = h.PubKey
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		Version    *big.Int     `json:"version" gencodec:"required"`
		ParentHash *common.Hash `json:"parentHash" gencodec:"required"`
		TxHash     *common.Hash `json:"txHash" gencodec:"required"`
		VotesRoot  *common.Hash `json:"votesRoot" gencodec:"required"`
		Time       *hexutil.Big `json:"time" gencodec:"required"`
		Number     *hexutil.Big `json:"number" gencodec:"required"`
		V          *hexutil.Big `json:"v" 		gencodec:"required"`
		R          *hexutil.Big `json:"r" 		gencodec:"required"`
		S          *hexutil.Big `json:"s" 		gencodec:"required"`
		PubKey     []byte       `json:"pubKey"	gencodec:"required"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Version == nil {
		return errors.New("missing required field 'version' for Header")
	}
	h.Version = dec.Version
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.TxHash == nil {
		return errors.New("missing required field 'txHash' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.VotesRoot == nil {
		return errors.New("missing required field 'votesRoot' for Header")
	}
	h.VotesRoot = *dec.VotesRoot
	if dec.Time == nil {
		return errors.New("missing required field 'time' for Header")
	}
	h.Time = (*big.Int)(dec.Time)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.V != nil {
		h.V = (*big.Int)(dec.V)
	}
	if dec.R != nil {
		h.R = (*big.Int)(dec.R)
	}
	if dec.S != nil {
		h.S = (*big.Int)(dec.S)
	}
	if dec.PubKey != nil {
		h.PubKey = dec.PubKey
	}
	return nil
}
