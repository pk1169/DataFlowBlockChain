// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		V           *hexutil.Big `json:"v"	gencodec:"required"`
		R           *hexutil.Big `json:"r"	gencodec:"required"`
		S           *hexutil.Big `json:"s"	gencodec:"required"`
		SrcAddress  string       `json:"srcAddress"	gencodec:"required"`
		DestAddress string       `json:"destAddress"	gencodec:"required"`
		SrcPort     *big.Int     `json:"srcPort" 	gencodec:"required"`
		DestPort    *big.Int     `json:"destPort"	gencodec:"required"`
		Protocol    *big.Int     `json:"protocol"	gencodec:"required"`
		StartTime   *hexutil.Big `json:"startTime"	gencodec:"required"`
		LastTime    *hexutil.Big `json:"lastTime"	gencodec:"required"`
		Size        *hexutil.Big `json:"size"		gencodec:"required"`
		PubKey      []byte       `json:"pubKey"		gencodec:"required"`
		Hash        *common.Hash `json:"hash" rlp:"-"`
	}
	var enc txdata
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)
	enc.SrcAddress = t.SrcAddress
	enc.DestAddress = t.DestAddress
	enc.SrcPort = t.SrcPort
	enc.DestPort = t.DestPort
	enc.Protocol = t.Protocol
	enc.StartTime = (*hexutil.Big)(t.StartTime)
	enc.LastTime = (*hexutil.Big)(t.LastTime)
	enc.Size = (*hexutil.Big)(t.Size)
	enc.PubKey = t.PubKey
	enc.Hash = t.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		V           *hexutil.Big `json:"v"	gencodec:"required"`
		R           *hexutil.Big `json:"r"	gencodec:"required"`
		S           *hexutil.Big `json:"s"	gencodec:"required"`
		SrcAddress  *string      `json:"srcAddress"	gencodec:"required"`
		DestAddress *string      `json:"destAddress"	gencodec:"required"`
		SrcPort     *big.Int     `json:"srcPort" 	gencodec:"required"`
		DestPort    *big.Int     `json:"destPort"	gencodec:"required"`
		Protocol    *big.Int     `json:"protocol"	gencodec:"required"`
		StartTime   *hexutil.Big `json:"startTime"	gencodec:"required"`
		LastTime    *hexutil.Big `json:"lastTime"	gencodec:"required"`
		Size        *hexutil.Big `json:"size"		gencodec:"required"`
		PubKey      []byte       `json:"pubKey"		gencodec:"required"`
		Hash        *common.Hash `json:"hash" rlp:"-"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.V != nil {
		t.V = (*big.Int)(dec.V)
	}
	if dec.R != nil {
		t.R = (*big.Int)(dec.R)
	}
	if dec.S != nil {
		t.S = (*big.Int)(dec.S)
	}
	if dec.SrcAddress != nil {
		t.SrcAddress = *dec.SrcAddress
	}
	if dec.DestAddress != nil {
		t.DestAddress = *dec.DestAddress
	}
	if dec.SrcPort != nil {
		t.SrcPort = dec.SrcPort
	}
	if dec.DestPort != nil {
		t.DestPort = dec.DestPort
	}
	if dec.Protocol != nil {
		t.Protocol = dec.Protocol
	}
	if dec.StartTime != nil {
		t.StartTime = (*big.Int)(dec.StartTime)
	}
	if dec.LastTime != nil {
		t.LastTime = (*big.Int)(dec.LastTime)
	}
	if dec.Size != nil {
		t.Size = (*big.Int)(dec.Size)
	}
	if dec.PubKey != nil {
		t.PubKey = dec.PubKey
	}
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	return nil
}
